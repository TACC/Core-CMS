/*
Grid

A gallery of apps to launch, images to view, etc.

_Note: Do not use both `layout-cols` together nor both `layout-rows` together._

.o-grid--content-image-fit    - Images fill its cell or its container
.o-grid--content-align-center - Align content vert. and horz. center
.o-grid--layout-cols-set-count - Same width columns, auto. col. count
.o-grid--layout-cols-min-width - Same width columns, default min. width

Markup:
<ul class="o-grid">
    <li>Apple</li>
    <li>Banana</li>
    <li>Grapes</li>
</ul>

Styleguide Objects.Grid
*/
@import url("_imports/tools/media-queries.css");
@import url("_imports/tools/x-grid.css");





/* Block */

.o-grid {
  --gap: var(--global-space--grid-gap, 15px); /* Bootstrap grid spacing */

  display: grid;
  gap: var(--gap);

  /* To always have equal height rows that match tallest content */
  @extend %x-grid--layout-rows-equal-max-height;
}





/* Elements */

/* Avoid leting image size exceed cell size */
/* FAQ: An intentionally loose limitation (so user can choose to escape it) */
.o-grid img {
  max-height: 100%;
  max-width: 100%;
}

/* Hide content that does exceed cell size */
/* FAQ: If user escapes image size exceeding cell size, do not make a mess */
.o-grid > * {
  overflow: hidden;
}






/* Modifiers */



/* Layout: Columns */

/* Layout: Columns: Same Width, Preset Col. Count */

.o-grid--layout-cols-set-count {
  @extend %x-grid--layout-cols-equal-set-count;
}
@media (--x-narrow-and-below) {
  .o-grid--layout-cols-set-count { --cell-cols: 1; }
}
@media (--x-narrow-to-narrow) {
  .o-grid--layout-cols-set-count { --cell-cols: 2; }
}
@media (--narrow-to-medium) {
  .o-grid--layout-cols-set-count { --cell-cols: 3; }
}
@media (--medium-to-wide) {
  .o-grid--layout-cols-set-count { --cell-cols: 4; }
}
@media (--wide-to-x-wide) {
  .o-grid--layout-cols-set-count { --cell-cols: 5; }
}
@media (--x-wide-to-xx-wide) {
  .o-grid--layout-cols-set-count { --cell-cols: 6; }
}
@media (--xx-wide-to-xxx-wide) {
  .o-grid--layout-cols-set-count { --cell-cols: 7; }
}
@media (--xxx-wide-to-max-wide) {
  .o-grid--layout-cols-set-count { --cell-cols: 8; }
}
@media (--max-wide-and-above) {
  .o-grid--layout-cols-set-count { --cell-cols: 9; }
}

/* Layout: Columns: Same Width, Preset Min. Width */

.o-grid--layout-cols-min-width {
  --min-width: 250px;

  @extend %x-grid--layout-equal-cols-min-width;
}
/* FAQ: Specifying `:not(img)` cuz `.o-grid img` already has `max-â€¦: 100%` */
.o-grid--layout-cols-min-width > *:not(img) {
  max-width: 100%; /* used if `--cell-width` is smaller than content */
  max-height: 100%; /* used if `--cell-height` is smaller than content */
}



/* Layout: Content */

/* Layout: Content: Align Vert/Horz Center */

.o-grid--content-align-center {
  @extend %x-grid--content-align-center;
}

/* Layout: Content: Image Fills Cell/Container */

.o-grid--content-image-fit > *:not(img) {
  width: 100%;
  height: 100%;
}
.o-grid--content-image-fit > img,
.o-grid--content-image-fit > figure > img,
.o-grid--content-image-fit * img:only-child {
  object-fit: cover;

  height: 100%;
  width: 100%;
}
/* Figures without classes for styling */
/* FAQ: Plugins in CMS Edit mode have this first if no other classes */
.o-grid--content-image-fit > figure:not([class]),
.o-grid--content-image-fit > figure[class=""],
.o-grid--content-image-fit > figure[class*="cms-plugin"] {
  display: flex;
  flex-direction: column;
}
.o-grid--content-image-fit > figure:not([class]) > img,
.o-grid--content-image-fit > figure[class=""] > img,
.o-grid--content-image-fit > figure[class*="cms-plugin"] > img {
  flex-grow: 1;
  min-height: 0; /* to allow flex item to shrink less than actual size */
}
